code//
#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
	int data;
	struct node *next,*prev;
}node;
node *createdll()
{
	int ch;
	node *head=NULL,*tail,*newnode;
	do
	{
		newnode=(node*)malloc(sizeof(node));
		newnode->next=NULL;
		newnode->prev=NULL;
		printf("Enter data\n");
		scanf("%d",&newnode->data);
		if(head==NULL)
		{
			head=newnode;
			tail=newnode;
			newnode->prev=NULL;
		}
		else
		{
			tail->next=newnode;
			newnode->prev=tail;
			tail=tail->next;
		}
		printf("Enter\n1.To create node\n0.To Cancel\n");
		scanf("%d",&ch);
	}while(ch!=0);
	return head;
}
void traverse(node *head)
{
	node *temp=head;
	if(temp==NULL)
		return ;
	else
	{
		while(temp->next!=NULL)
		{
			printf("%d\t",temp->data);
			temp=temp->next;
		}
		printf("%d",temp->data);
	}
	printf("\n");
}
node *insertb(node *head)
{
	node *newnode;
	newnode=(node*)malloc(sizeof(node));
	if(newnode==NULL)
	{
		printf("Insertion not possible\n");
		return head;
	}
	printf("Enter data\n");
	scanf("%d",&newnode->data);
	newnode->prev=NULL;
	newnode->next=head;
	head->prev=newnode;
	head=newnode;
	return head;
}
node *insertl(node *head)
{
	node *newnode,*temp=head;
	newnode=(node*)malloc(sizeof(node));

	while(temp->next!=NULL)
	{
		temp=temp->next;
	}
	printf("Enter data\n");
	scanf("%d",&newnode->data);
	newnode->prev=temp;
	temp->next=newnode;
	newnode->next=NULL;
	return head;
}
int len(node *head)
{
	node *temp=head;
	int c=0;
	while(temp!=NULL)
	{
		c=c+1;
		temp=temp->next;
	}
	return c;
}
node *insert(node *head)
{
	node *newnode,*temp=head;
	int i=1,pos,l=len(head),ch;
	printf("Enter position where to insert\n");
	scanf("%d",&pos);
	if(pos==1||head==NULL)
	{
		head=insertb(head);
		return head;
	}
	if(pos==l+1)
	{
		head=insertl(head);
		return head;
	}
	if(pos<1||pos>l+1)
	{
		printf("Insertion not possible\n");
		return head;
	}
	while(i<pos-1)
	{
		i++;
		temp=temp->next;
	}
	newnode=(node*)malloc(sizeof(node));
	printf("Enter data\n");
	scanf("%d",&newnode->data);
	newnode->next=temp->next;
	newnode->prev=temp;
	temp->next=newnode;
	newnode->next->prev=newnode;
	return head;
}
node *deleteb(node *head)
{
	node *temp=head;
	head=head->next;
	temp->prev=NULL;
	free(temp);
	return head;
}
node *deletel(node *head)
{
	node *temp=head,*prev;
	while(temp->next!=NULL)
	{
		temp=temp->next;
	}
	prev=temp->prev;
	prev->next=NULL;
	free(temp);
	return head;
}
node *deletep(node *head)
{
	node *temp=head,*prev;
	int i=1,pos,l=len(head);
	printf("Enter position to delete\n");
	scanf("%d",&pos);
	for(;i<pos;)
	{
		temp=temp->next;
		i++;
	}
	prev=temp->prev;
	prev->next=temp->next;
	temp->next=prev->next;
	free(temp);
	return head;
}
int main()
{
	node *head;
	int ch;
	head=createdll();
	do
	{
	printf("Enter your choice\n1.Traversal\n2.Insertion\n3.Delete at begining\n4.Delete at last\n5.Delete at any pos\n0.Exit\n");
	scanf("%d",&ch);
	switch(ch)
	{
		case 1:
			traverse(head);
			break;
		case 2:	
			head=insert(head);
			traverse(head);
			break;
		case 3:
			head=deleteb(head);
			traverse(head);
			break;
		case 4:
			head=deletel(head);
			traverse(head);
			break;
		case 5:
			head=deletep(head);
			traverse(head);
			break;
		case 0:
			printf("Exitingggg..\n");
			break;
	}
	}while(ch!=0);
	return 0;
}
